<!DOCTYPE html>
<html>
<%- include('../partials/head') %>
<%- include('../partials/header') %>

<body class="bg-yasarred">
    <div class="ui container" style="margin-top: 100px !important; padding-bottom: 100px;">
        <div class="ui segment">
            <%- include('./partials/dashboard-menu') %>
            <div class="ui segment">
                <h2>Casinos</h2>
                <h3>Manage Casinos</h3>
                <div class="ui primary button" onclick="openAddModal()">Add new Casino</div>
                <div id="casinos-container" class="ui items"></div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer') %>

    <script>
        function openEditModal(casinoId) {
            // Fetch the casino details from the API
            fetch(`/api/casinos/${casinoId}`)
                .then(response => response.json())
                .then(casino => {
                    const selectedCategories = casino.categories;
                    const selectedFeatures = casino.features;
                    const selectedIndividualFeatures = casino.individualFeatures;
                    const selectedIndividualBonuses = casino.individualBonuses;
                    const selectedProviders = casino.providers;
                    const selectedLicenses = casino.licenses;
                    const selectedPaymentMethods = casino.paymentMethods;
                    const selectedDisplayBonus = casino.displayBonus;
                    const selectedWagerTypes = casino.wagerType;
                    const selectedImage = casino.image;

                    // Open the modal for editing the casino data
                    if (document.querySelector('.ui.modal')) {
                        document.querySelector('.ui.modal')
                            .remove(); // Remove the existing modal if it exists
                    }

                    const modal = document.createElement('div');
                    modal.classList.add('ui', 'modal', 'edit');

                    modal.innerHTML = `
                    <div class="header">Edit Casino</div>
                    <div class="content">
                        <form class="ui form">
                            <div class="ui segment">
                            <div class="ui header">General</div>
                            <div class="three fields">
                                <div class="field">
                                    <label>Name</label>
                                    <input type="text" name="casinoName" placeholder="Enter the casino name" value="${casino.name}">
                                </div>
                                <div class="field">
                                    <label>Label</label>
                                    <input type="text" name="label" placeholder="Enter the casino label" value="${casino.label}">
                                </div>
                                <div class="field">
                                    <label>Large Label</label>
                                    <input type="text" name="labelLarge" placeholder="Enter the casino label" value="${casino.labelLarge}">
                                </div>
                                    <div class="field">
                                    <label>Image (<a href="images">manage</a>)</label>
                                    <select name="image" class="ui fluid search selection dropdown" id="imageDropdown">
                                    </select>
                                </div>
                            </div>
                            <div class="four fields">
                                <div class="field">
                                    <div class="ui toggle checkbox">
                                        <input type="checkbox" name="active" ${casino.active ? 'checked' : ''}>
                                        <label>Active</label>
                                    </div>
                                </div>
                                <div class="field">
                                    <div class="ui toggle checkbox">
                                        <input type="checkbox" name="isNew" ${casino.isNew ? 'checked' : ''}>
                                        <label>New</label>
                                    </div>
                                </div>
                                <div class="field">
                                    <div class="ui toggle checkbox">
                                        <input type="checkbox" name="vpn" ${casino.vpn ? 'checked' : ''}>
                                        <label>VPN allowed</label>
                                    </div>
                                </div>
                                <div class="field">
                                    <div class="ui toggle checkbox">
                                        <input type="checkbox" name="noDeposit" ${casino.noDeposit ? 'checked' : ''}>
                                        <label>No Deposit</label>
                                    </div>
                                </div>
                                <div class="field">
                                    <div class="ui toggle checkbox">
                                        <input type="checkbox" name="prohibitedGamesProtection" ${casino.prohibitedGamesProtection ? 'checked' : ''}>
                                        <label>Prohibited Games Protection</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="ui segment">
                            <div class="ui header">Features</div>
                            <div class="three fields">
                                <div class="field">
                                    <label>Categories (<a href="casinos/categories">manage</a>)</label>
                                    <select name="categories" multiple class="ui fluid search dropdown" id="categoriesDropdown">
                                    </select>
                                </div>
                                <div class="field">
                                    <label>Providers (<a href="casinos/providers">manage</a>)</label>
                                    <select name="providers" multiple class="ui fluid search dropdown" id="providersDropdown">
                                    </select>
                                </div>
                                <div class="field">
                                    <label>Payment Methods (<a href="casinos/paymentmethods">manage</a>)</label>
                                    <select name="paymentMethods" multiple class="ui fluid search dropdown" id="paymentMethodsDropdown">
                                    </select>
                                </div>
                                <div class="two wide field">
                                    <label>Licenses (<a href="casinos/licenses">manage</a>)</label>
                                    <select name="licenses" multiple class="ui fluid search dropdown" id="licensesDropdown">
                                    </select>
                                </div>
                            </div>
                            <div class="ui divider"></div>
                            <div class="two fields">
                                <div class="eight wide field">
                                    <label>Features (<a href="casinos/features">manage</a>)</label>
                                    <select name="features" multiple class="ui fluid search dropdown" id="featuresDropdown">
                                    </select>
                                </div>
                                <div class="eight wide field">
                                    <label>Individual Features <div class="ui mini primary button" onclick="showEditableIndividualFeatures('${casino._id}')">manage</div></label>
                                    <div class="ui action input">
                                        <select name="individualFeatures" multiple class="ui fluid search dropdown" id="individualFeaturesDropdown">
                                        </select>
                                        <div class="ui small primary button" onclick="createAddIndividualCasinoFeatureModal('${casino._id}')">Create new</div>
                                    </div>
                                </div>

                            </div>
                            </div>
                            <div class="ui segment">
                                <div class="ui header">Bonuses</div>
                            <div class="three fields">
                                <div class="field">
                                    <label>Individual Bonuses <div class="ui mini primary button" onclick="showEditableIndividualBonuses('${casino._id}')">manage</div></label>
                                    <select name="individualBonuses" multiple class="ui fluid dropdown" id="individualBonusesDropdown">
                                    </select>
                                    <div class="ui small primary button" onclick="createAddIndividualCasinoBonusModal('${casino._id}')">Create new</div>
                                </div>
                                <div class="field">
                                    <label>Display Bonus</label>
                                    <select name="displayBonus" class="ui fluid dropdown" id="displayBonusDropdown">
                                    </select>
                                </div>
                            </div>
                            <div class="ui divider"></div>
                            <div class="three fields">
                                <div class="three two field">
                                    <label>Max Bet</label>
                                    <input type="text" name="maxBet" placeholder="Enter the casino background URL" value="${casino.maxBet}">
                                </div>
                                <div class="three two field">
                                    <label>Max Cashout</label>
                                    <input type="text" name="maxCashout" placeholder="Enter the casino background URL" value="${casino.maxCashout}">
                                </div>
                                <div class="four wide field">
                                    <label>Wager</label>
                                    <input type="text" name="wager" placeholder="Enter the casino background URL" value="${casino.wager}">
                                </div>
                                <div class="four wide field">
                                    <label>Wager Type (<a href="casinos/wagertypes">manage</a>)</label>
                                    <select name="wagerType" multiple class="ui fluid dropdown" id="wagerTypeDropdown">
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="ui segment">
                            <div class="ui header">Text</div>
                            <div class="ui grid">
                                <div class="eight wide column">
                                    <div class="field">
                                        <label>Description</label>
                                        <textarea name="description" rows="10" placeholder="Enter the casino description">${casino.description}</textarea>
                                    </div>
                                </div>
                                <div class="eight wide column">
                                    <div class="field">
                                        <label>Review Title</label>
                                        <input type="text" name="reviewTitle" placeholder="Enter the casino background URL" value="${casino.reviewTitle}">
                                    </div>
                                    <div class="field">
                                        <label>Review</label>
                                        <textarea name="review" rows="6" placeholder="Enter the casino description">${casino.review}</textarea>
                                    </div>
                            </div>
                            </div>
                        </div>
                            <div class="ui segment">
                                <div class="ui header">Affiliate</div>
                                <div class="two fields">
                                <div class="four wide field">
                                    <label>Shortlink</label>
                                    <input type="text" name="affiliateShortlink" placeholder="Enter the casino image URL" value="${casino.affiliateShortlink}">
                                </div>
                                <div class="twelve wide field">
                                    <label>Affiliate Link</label>
                                    <input type="text" name="affiliateUrl" placeholder="Enter the casino background URL" value="${casino.affiliateUrl}">
                                </div>
                            </div>
                            </div>
                        </form>
                    </div>
                    <div class="actions">
                        <div class="ui button">Cancel</div>
                        <div class="ui primary button" onclick="saveCasino('${casino._id}')">Save</div>
                    </div>
                `;
                    document.body.appendChild(modal);
                    $(modal).modal('show');
                    $('.ui.dropdown').dropdown(); // Initialize the dropdown

                    // Populate the categories dropdown with available categories
                    getAvailableCategories(selectedCategories);
                    getAvailableImages(selectedImage);

                    // Populate the features dropdown with available features
                    getAvailableFeatures(selectedFeatures);
                    getAvailableIndividualFeatures(casinoId, selectedIndividualFeatures);

                    // Populate the providers dropdown with available providers
                    getAvailableProviders(selectedProviders);

                    // Populate the licenses dropdown with available licenses
                    getAvailableLicenses(selectedLicenses);

                    // Populate the payment methods dropdown with available payment methods
                    getAvailablePaymentMethods(selectedPaymentMethods);


                    // Populate the wager types dropdown with available wager types
                    getAvailableWagerTypes(selectedWagerTypes);

                    // Populate the bonuses dropdown with available bonuses
                    getAvailableIndividualBonuses(casinoId, selectedIndividualBonuses, selectedDisplayBonus);

                })
        }

        function getAvailableImages(selectedImage) {
            fetch('/api/images')
                .then(response => response.json())
                .then(images => {
                    const imageDropdown = document.getElementById('imageDropdown');
                    console.log('Image Dropdown:', imageDropdown);
                    console.log('Images:', images);
                    imageDropdown.innerHTML = ''; // Remove existing options

                    images.forEach(image => {
                        const option = document.createElement('option');
                        option.value = image._id;
                        option.innerText = image.name;

                        // Create an image element and set its source to image.imageUrl
                        const img = document.createElement('img');
                        img.src = image.imageUrl;
                        img.alt = image.name;
                        //img.style.maxWidth = '200px'; // Set the width of the image (adjust as needed)

                        // Append the image element to the option
                        option.appendChild(img);

                        if (selectedImage == image._id) {
                            option.selected = true; // Select the option if it is in the selected images
                        }
                        imageDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching images:', error);
                });
        }

        function getAvailableCategories(selectedCategories) {
            fetch('/api/casinos/categories')
                .then(response => response.json())
                .then(categories => {
                    const categoriesDropdown = document.getElementById('categoriesDropdown');
                    console.log('Categories Dropdown:', categoriesDropdown);
                    console.log('Categories:', categories);
                    categoriesDropdown.innerHTML = ''; // Remove existing options

                    categories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category._id;
                        option.innerText = category.name;
                        if (selectedCategories.includes(category._id)) {
                            option.selected = true; // Select the option if it is in the selected categories
                        }
                        categoriesDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching categories:', error);
                });
        }


        function getAvailableWagerTypes(selectedWagerTypes) {
            fetch('/api/casinos/wagertypes')
                .then(response => response.json())
                .then(wagerTypes => {
                    const wagerTypeDropdown = document.getElementById('wagerTypeDropdown');
                    console.log('Wager Type Dropdown:', wagerTypeDropdown);
                    console.log('Wager Types:', wagerTypes);
                    wagerTypeDropdown.innerHTML = ''; // Remove existing options

                    wagerTypes.forEach(wagerType => {
                        const option = document.createElement('option');
                        option.value = wagerType._id;
                        option.innerText = wagerType.name;
                        if (selectedWagerTypes.includes(wagerType._id)) {
                            option.selected = true; // Select the option if it is in the selected wagerTypes
                        }
                        wagerTypeDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching wager types:', error);
                });
        }

        function getAvailableFeatures(selectedFeatures) {
            fetch('/api/casinos/features')
                .then(response => response.json())
                .then(features => {
                    const featuresDropdown = document.getElementById('featuresDropdown');
                    console.log('Features Dropdown:', featuresDropdown);
                    console.log('Features:', features);
                    featuresDropdown.innerHTML = ''; // Remove existing options

                    features.forEach(feature => {
                        const option = document.createElement('option');
                        option.value = feature._id;
                        option.innerText = feature.name;
                        if (selectedFeatures.includes(feature._id)) {
                            option.selected = true; // Select the option if it is in the selected features
                        }
                        featuresDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching features:', error);
                });
        }

        function getAvailableProviders(selectedProviders) {
            fetch('/api/casinos/providers')
                .then(response => response.json())
                .then(providers => {
                    const providersDropdown = document.getElementById('providersDropdown');
                    console.log('Providers Dropdown:', providersDropdown);
                    console.log('Providers:', providers);
                    providersDropdown.innerHTML = ''; // Remove existing options

                    providers.forEach(provider => {
                        const option = document.createElement('option');
                        option.value = provider._id;
                        option.innerText = provider.name;
                        if (selectedProviders.includes(provider._id)) {
                            option.selected = true; // Select the option if it is in the selected providers
                        }
                        providersDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching providers:', error);
                });
        }

        function getAvailableLicenses(selectedLicenses) {
            fetch('/api/casinos/licenses')
                .then(response => response.json())
                .then(licenses => {
                    const licensesDropdown = document.getElementById('licensesDropdown');
                    console.log('Licenses Dropdown:', licensesDropdown);
                    console.log('Licenses:', licenses);
                    licensesDropdown.innerHTML = ''; // Remove existing options

                    licenses.forEach(license => {
                        const option = document.createElement('option');
                        option.value = license._id;
                        option.innerText = license.name;
                        if (selectedLicenses.includes(license._id)) {
                            option.selected = true; // Select the option if it is in the selected licenses
                        }
                        licensesDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching licenses:', error);
                });
        }

        function getAvailablePaymentMethods(selectedPaymentMethods) {
            fetch('/api/casinos/paymentmethods')
                .then(response => response.json())
                .then(paymentMethods => {
                    const paymentMethodsDropdown = document.getElementById('paymentMethodsDropdown');
                    console.log('Payment Methods Dropdown:', paymentMethodsDropdown);
                    console.log('Payment Methods:', paymentMethods);
                    paymentMethodsDropdown.innerHTML = ''; // Remove existing options

                    paymentMethods.forEach(paymentMethod => {
                        const option = document.createElement('option');
                        option.value = paymentMethod._id;
                        option.innerText = paymentMethod.name;
                        if (selectedPaymentMethods.includes(paymentMethod._id)) {
                            option.selected =
                                true; // Select the option if it is in the selected paymentMethods
                        }
                        paymentMethodsDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching payment methods:', error);
                });
        }

        function getAvailableIndividualFeatures(casinoId, selectedIndividualFeatures) {
            fetch('/api/casinos/' + casinoId + '/individualfeatures')
                .then(response => response.json())
                .then(individualFeatures => {
                    const individualFeaturesDropdown = document.getElementById('individualFeaturesDropdown');
                    console.log('Individual Features Dropdown:', individualFeaturesDropdown);
                    console.log('Individual Features:', individualFeatures);
                    individualFeaturesDropdown.innerHTML = ''; // Remove existing options

                    individualFeatures.forEach(individualFeature => {
                        const option = document.createElement('option');
                        option.value = individualFeature._id;
                        option.innerText = individualFeature.name;
                        if (selectedIndividualFeatures.includes(individualFeature._id)) {
                            option.selected =
                                true; // Select the option if it is in the selected individualFeatures
                        }
                        individualFeaturesDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching individual features:', error);
                });
        }

        function getAvailableIndividualBonuses(casinoId, selectedIndividualBonuses, selectedDisplayBonus) {
            fetch('/api/casinos/' + casinoId + '/individualbonuses')
                .then(response => response.json())
                .then(individualBonuses => {
                    const individualBonusesDropdown = document.getElementById('individualBonusesDropdown');
                    const displayBonusDropdown = document.getElementById('displayBonusDropdown');
                    console.log('Individual Bonuses Dropdown:', individualBonusesDropdown);
                    console.log('Individual Bonuses:', individualBonuses);
                    individualBonusesDropdown.innerHTML = ''; // Remove existing options
                    displayBonusDropdown.innerHTML = ''; // Remove existing options

                    individualBonuses.forEach(individualBonus => {
                        const option = document.createElement('option');
                        option.value = individualBonus._id;
                        option.innerText = individualBonus.name;
                        if (selectedIndividualBonuses.includes(individualBonus._id)) {
                            option.selected = true; // Select the option if it is in the selected individualBonuses
                        }
                        individualBonusesDropdown.appendChild(option);

                        // Add the same option to the displayBonusDropdown
                        const displayOption = document.createElement('option');
                        displayOption.value = individualBonus._id;
                        displayOption.innerText = individualBonus.name;
                        if (selectedDisplayBonus.includes(individualBonus._id)) {
                            displayOption.selected = true; // Select the option if it is in the selected individualBonuses
                        }
                        displayBonusDropdown.appendChild(displayOption);
                    });
                })
                .catch(error => {
                    console.error('Error fetching individual bonuses:', error);
                });
        }




        function saveCasino(casinoId) {

            //#region Get the updated casino data from the form
            const name = document.querySelector('input[name="casinoName"]').value;

            const categoriesSelect = document.querySelector('select[name="categories"]');
            const categories = Array.from(categoriesSelect.selectedOptions).map(option => option.value);

            const description = document.querySelector('textarea[name="description"]').value;
            const active = document.querySelector('input[name="active"]').checked;
            const isNew = document.querySelector('input[name="isNew"]').checked;
            const label = document.querySelector('input[name="label"]').value;
            const labelLarge = document.querySelector('input[name="labelLarge"]').value;

            const individualBonusesSelect = document.querySelector('select[name="individualBonuses"]');
            const individualBonuses = Array.from(individualBonusesSelect.selectedOptions).map(option => option.value);

            const displayBonus = document.querySelector('select[name="displayBonus"]').value;

            const maxBet = document.querySelector('input[name="maxBet"]').value;
            const maxCashout = document.querySelector('input[name="maxCashout"]').value;

            const wager = document.querySelector('input[name="wager"]').value;

            const wagerTypeSelect = document.querySelector('select[name="wagerType"]');
            const wagerType = Array.from(wagerTypeSelect.selectedOptions).map(option => option.value);

            const noDeposit = document.querySelector('input[name="noDeposit"]').checked;
            const prohibitedGamesProtection = document.querySelector('input[name="prohibitedGamesProtection"]').checked;
            const vpn = document.querySelector('input[name="vpn"]').checked;

            const featuresSelect = document.querySelector('select[name="features"]');
            const features = Array.from(featuresSelect.selectedOptions).map(option => option.value);

            const individualFeaturesSelect = document.querySelector('select[name="individualFeatures"]');
            const individualFeatures = Array.from(individualFeaturesSelect.selectedOptions).map(option => option.value);

            const providersSelect = document.querySelector('select[name="providers"]');
            const providers = Array.from(providersSelect.selectedOptions).map(option => option.value);

            const licensesSelect = document.querySelector('select[name="licenses"]');
            const licenses = Array.from(licensesSelect.selectedOptions).map(option => option.value);

            const paymentMethodsSelect = document.querySelector('select[name="paymentMethods"]');
            const paymentMethods = Array.from(paymentMethodsSelect.selectedOptions).map(option => option.value);

            const reviewTitle = document.querySelector('input[name="reviewTitle"]').value;
            const review = document.querySelector('textarea[name="review"]').value;

            const imageDropdown = document.querySelector('select[name="image"]');
            const image = imageDropdown.value;

            const affiliateUrl = document.querySelector('input[name="affiliateUrl"]').value;

            const affiliateShortlink = document.querySelector('input[name="affiliateShortlink"]').value;
            //#endregion



            console.log('Casino', casinoId, 'will be updated with data:', 'Name:', name, 'Categories:', categories,
                'Description:', description, 'Active:', active, 'isNew:', isNew, 'Label:',
                label, 'LabelLarge:', labelLarge, 'DisplayBonus:', displayBonus, 'MaxBet:', maxBet, 'MaxCashout:',
                maxCashout, 'Wager:', wager, 'WagerType:', wagerType, 'NoDeposit:', noDeposit,
                'ProhibitedGamesProtection:', prohibitedGamesProtection, 'VPN:', vpn, 'Features:', features,
                'Providers:', providers, 'PaymentMethods:', paymentMethods, 'ReviewTitle:', reviewTitle, 'Review:',
                review, 'image:', image, 'affiliateUrl:', affiliateUrl, 'AffiliateShortlink:', affiliateShortlink,
                'IndividualFeatures:', individualFeatures, 'IndividualBonuses:', individualBonuses, 'Licenses:', licenses);


            // Send a PUT request to the API with the updated casino data
            fetch(`/api/casinos/${casinoId}`, {
                    method: 'PUT',
                    body: JSON.stringify({
                        name,
                        categories,
                        description,
                        active,
                        isNew,
                        label,
                        labelLarge,
                        displayBonus,
                        maxBet,
                        maxCashout,
                        wager,
                        wagerType,
                        noDeposit,
                        prohibitedGamesProtection,
                        vpn,
                        features,
                        individualFeatures,
                        providers,
                        paymentMethods,
                        reviewTitle,
                        review,
                        image,
                        affiliateUrl,
                        affiliateShortlink,
                        individualBonuses,
                        licenses
                    }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(result => {
                    console.log('Casino updated:', result);
                    // Close the modal and fetch the updated casinos
                    $('.ui.modal').modal('hide');
                    showToast('success', 'Casino updated successfully', 'The casino has been updated successfully');
                    fetchCasinos();
                })
                .catch(error => {
                    console.error('Error updating casino:', error);
                    showToast('error', 'Error updating casino', error);
                });
        }

        function openAddModal() {
            const modal = document.createElement('div');
            modal.classList.add('ui', 'modal');
            modal.innerHTML = `
                    <div class="header">Add Casino</div>
                    <div class="content">
                        <form class="ui form">
                            <div class="field">
                                <label>Name</label>
                                <input type="text" name="name" placeholder="Enter the casino name">
                            </div>
                            <div class="field">
                                <label>Location</label>
                                <input type="text" name="location" placeholder="Enter the casino location">
                            </div>
                            <div class="field">
                                <label>Description</label>
                                <textarea name="description" placeholder="Enter the casino description"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="actions">
                        <div class="ui button">Cancel</div>
                        <div class="ui primary button" onclick="saveNewCasino()">Save</div>
                    </div>
                `;
            document.body.appendChild(modal);
            $(modal).modal('show');
        }

        function saveNewCasino() {
            // Get the new casino data from the form
            const name = document.querySelector('input[name="name"]').value;
            const location = document.querySelector('input[name="location"]').value;
            const description = document.querySelector('textarea[name="description"]').value;

            // Send a POST request to the API to add the new casino
            fetch('/api/casinos', {
                    method: 'POST',
                    body: JSON.stringify({
                        name,
                        location,
                        description
                    }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(result => {
                    console.log('New casino added:', result);
                    // Close the modal and fetch the updated casinos
                    $('.ui.modal').modal('hide');
                    fetchCasinos();
                })
                .catch(error => {
                    console.error('Error adding new casino:', error);
                });
        }

        function fetchCasinos() {
            fetch('/api/casinos')
                .then(response => response.json())
                .then(casinos => {
                    // Sort the casinos by priority
                    casinos.sort((a, b) => a.priority - b.priority);

                    const casinosContainer = document.getElementById('casinos-container');
                    casinosContainer.innerHTML = ''; // Remove existing items

                    casinos.forEach(casino => {
                        // Create a Fomantic UI item for each casino
                        const item = document.createElement('div');
                        item.classList.add('item');
                        item.style.backgroundColor = casino.active ? '#fff' : '#eee';
                        item.id = casino._id;
                        item.draggable = true; // Enable drag and drop
                        item.addEventListener('dragstart', handleDragStart);
                        item.addEventListener('dragover', handleDragOver);
                        item.addEventListener('drop', handleDrop);
                        item.innerHTML = `
                            <div class="image">
                                <div class="ui ${casino.active ? 'green' : 'red'} label" onclick="toggleActive('${casino._id}', ${casino.active})">${casino.active ? 'active' : 'disabled'}</div>
                            <img style="max-width: 100px" src="${casino.imageUrl}">
                            </div>
                            <div class="content">
                            <a class="header">${casino.name}</a>
                            <div class="meta">
                                <span>${casino.label} (${casino.labelLarge})</span>
                            </div>
                            <div class="description">
                                <p>${casino.description}</p>
                            </div>
                            <div class="extra">
                                <a class="ui right floated primary button" href="/dashboard/casinos/${casino._id}/edit">
                                    Edit
                                </a>
                                <div class="ui right floated primary button" onclick="duplicateCasino('${casino._id}')">
                                    Duplicate
                                </div>
                                <div class="ui right floated red button" onclick="confirmDeleteCasino('${casino._id}')">
                                    Delete
                                </div>
                                <div class="ui label">Limited</div>
                            </div>
                            </div>
                            `;
                        casinosContainer.appendChild(item);
                    });
                })
                .catch(error => {
                    console.error('Error fetching casinos:', error);
                });
        }

        function handleDragStart(event) {
            event.dataTransfer.setData('text/plain', event.target.id);
        }

        function handleDragOver(event) {
            event.preventDefault();
        }

        function handleDrop(event) {
            event.preventDefault();
            const id1 = event.dataTransfer.getData('text/plain');
            const cardElement = event.target.closest('[id]');
            const id2 = cardElement ? cardElement.id : null;
            console.log('ID1:' + id1);
            console.log('ID2:' + id2);

            // Send a POST request to swap the priorities
            fetch('/api/casinos/priority/swap', {
                method: 'PUT',
                body: JSON.stringify({
                    id1,
                    id2
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    showToast('error', 'Error swapping priorities', 'Error swapping priorities: ' + response.status);
                    throw new Error('Error swapping priorities: ' + response.status);
                }
            })
            .then(result => {
                console.log('Priorities swapped:', result);
                showToast('success', 'Priorities swapped successfully', 'The priorities have been swapped successfully');
                fetchCasinos(); // Fetch the updated casinos
            })
            .catch(error => {
                console.error(error);
            });
        }

        function duplicateCasino(casinoId) {
            // Send a POST request to duplicate the casino
            fetch(`/api/casinos/${casinoId}/duplicate`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    showToast('error', 'Error duplicating casino', 'Error duplicating casino: ' + response.status);
                    throw new Error('Error duplicating casino: ' + response.status);
                }
            })
            .then(result => {
                console.log('Casino duplicated:', result);
                showToast('success', 'Casino duplicated successfully', 'The casino has been duplicated successfully');
                fetchCasinos(); // Fetch the updated casinos
            })
            .catch(error => {
                showToast('error', 'Error duplicating casino', 'Error duplicating casino: ' + error);
                console.error('Error duplicating casino:', error);
            });
        }

        function confirmDeleteCasino(casinoId) {
            // Create a Fomantic UI mini dialog for confirmation
            const dialog = document.createElement('div');
            dialog.classList.add('ui', 'mini', 'modal');
            dialog.innerHTML = `
                    <div class="header">Delete Casino</div>
                    <div class="content">
                        <p>Are you sure you want to delete this casino?</p>
                    </div>
                    <div class="actions">
                        <div class="ui button">Cancel</div>
                        <div class="ui red button" onclick="deleteCasino('${casinoId}')">Delete</div>
                    </div>
                `;
            document.body.appendChild(dialog);
            $(dialog).modal('show');
        }

        function deleteCasino(casinoId) {
            // Send a DELETE request to the API
            fetch(`/api/casinos`, {
                    method: 'DELETE',
                    body: JSON.stringify({
                        id: casinoId
                    }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(result => {
                    console.log('Casino deleted:', result);
                    // hide the confirmation dialog
                    $('.ui.modal').modal('hide');
                    // delete the modal element from the DOM
                    document.querySelector('.ui.modal').remove();
                    fetchCasinos();
                })
                .catch(error => {
                    console.error('Error deleting casino:', error);
                });
        }

        function toggleActive(casinoId, active) {
            // Send a PUT request to the API to toggle the active state
            fetch(`/api/casinos/${casinoId}/toggleActive`, {
                    method: 'PUT',
                    body: JSON.stringify({
                        active: !active
                    }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(result => {
                    console.log('Casino active state updated:', result);
                    // Fetch the updated casinos
                    fetchCasinos();
                })
                .catch(error => {
                    console.error('Error updating casino active state:', error);
                });
        }

        function showEditableIndividualFeatures(casinoId) {
            // Create a Fomantic UI modal to display the editable individual features table
            const modal = document.createElement('div');
            modal.classList.add('ui', 'modal');
            modal.innerHTML = `
            <div class="header">Individual Features</div>
            <div class="content">
                <table class="ui celled table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="actions">
                <div class="ui button">Close</div>
            </div>
        `;
            document.body.appendChild(modal);
            $(modal).modal('show');


            // Fetch individual features for the specific casino
            fetch(`/api/casinos/${casinoId}/individualfeatures`)
                .then(response => response.json())
                .then(features => {
                    const tbody = modal.querySelector('tbody');
                    tbody.innerHTML = features.map(feature => `
                    <tr data-feature-id="${feature._id}">
                        <td contenteditable="true">${feature.name}</td>
                        <td contenteditable="true">${feature.description}</td>
                        <td>
                            <button class="ui primary button save-button">Save</button>
                            <button class="ui red button delete-button">Delete</button>
                        </td>
                    </tr>
                `).join('');

                    // Add event listeners to save buttons
                    const saveButtons = modal.querySelectorAll('.save-button');
                    saveButtons.forEach(button => {
                        button.addEventListener('click', () => {
                            const tr = button.closest('tr');
                            const featureId = tr.dataset.featureId;
                            const name = tr.querySelector('td:nth-child(1)').textContent;
                            const description = tr.querySelector('td:nth-child(2)').textContent;

                            // Send a PUT request to update the individual feature
                            fetch(`/api/casinos/${casinoId}/individualfeatures/${featureId}`, {
                                    method: 'PUT',
                                    body: JSON.stringify({
                                        name: name,
                                        description: description
                                    }),
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                .then(response => response.json())
                                .then(result => {
                                    console.log('Individual feature updated:', result);
                                    location.reload();
                                })
                                .catch(error => {
                                    console.error('Error updating individual feature:', error);
                                });
                        });
                    });

                    // Add event listeners to delete buttons
                    const deleteButtons = modal.querySelectorAll('.delete-button');
                    deleteButtons.forEach(button => {
                        button.addEventListener('click', () => {
                            const tr = button.closest('tr');
                            const featureId = tr.dataset.featureId;

                            // Send a DELETE request to delete the individual feature
                            fetch(`/api/casinos/${casinoId}/individualfeatures/${featureId}`, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                .then(response => response.json())
                                .then(result => {
                                    console.log('Individual feature deleted:', result);
                                    tr.remove();
                                })
                                .catch(error => {
                                    console.error('Error deleting individual feature:', error);
                                });
                        });
                    });
                })
                .catch(error => {
                    console.error('Error fetching individual features:', error);
                });
        }

        // Function to create a Fomantic UI modal with a form to add an individual feature to a casino
        function createAddIndividualCasinoFeatureModal(casinoId) {
            // Create the modal element
            var modal = $('<div>').addClass('ui modal');

            // Create the modal content
            var content = $('<div>').addClass('content');
            var form = $('<form>').addClass('ui form');
            var featureInput = $('<div>').addClass('field');
            var featureLabel = $('<label>').text('Feature');
            var featureInputField = $('<input>').attr('type', 'text').attr('placeholder', 'Enter feature');
            featureInput.append(featureLabel, featureInputField);
            form.append(featureInput);
            content.append(form);

            // Create the modal actions
            var actions = $('<div>').addClass('actions');
            var cancelButton = $('<button>').addClass('ui button').text('Cancel');
            var addButton = $('<button>').addClass('ui primary button').text('Add');
            actions.append(cancelButton, addButton);

            // Append the content and actions to the modal
            modal.append(content, actions);

            // Initialize the modal
            modal.modal();

            // Event listener for cancel button
            cancelButton.on('click', function () {
                modal.modal('hide');
            });

            // Event listener for add button
            addButton.on('click', function () {
                var featureName = featureInputField.val();
                addIndividualCasinoFeature(casinoId, featureName);

                modal.modal('hide');
            });

            // Show the modal
            modal.modal('show');
        }

        // Function to add an individual feature to a casino
        function addIndividualCasinoFeature(casinoId, featureName) {
            $.ajax({
                url: '/api/casinos/' + casinoId + '/individualfeatures',
                method: 'POST',
                data: {
                    name: featureName
                },
                success: function (data) {
                    console.log('Success:', data);
                    showToast('success', 'Feature added successfully');
                    $('.ui.modal.edit').modal('show');
                },
                error: function (error) {
                    console.log('Error:', error);
                    showToast('error', 'Error adding feature');
                    $('.ui.modal.edit').modal('show');
                    document.querySelector('.ui.modal').scrollTop = 0;
                }
            });
        }

        function showEditableIndividualBonuses(casinoId) {
            // Create a Fomantic UI modal to display the editable individual bonuses table
            const modal = document.createElement('div');
            modal.classList.add('ui', 'modal');
            modal.innerHTML = `
            <div class="header">Individual Bonuses</div>
            <div class="content">
                <table class="ui celled table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="actions">
                <div class="ui button">Close</div>
            </div>
        `;
            document.body.appendChild(modal);
            $(modal).modal('show');


            // Fetch individual bonuses for the specific casino
            fetch(`/api/casinos/${casinoId}/individualbonuses`)
                .then(response => response.json())
                .then(bonuses => {
                    const tbody = modal.querySelector('tbody');
                    tbody.innerHTML = bonuses.map(bonus => `
                    <tr data-bonus-id="${bonus._id}">
                        <td contenteditable="true">${bonus.name}</td>
                        <td contenteditable="true">${bonus.description}</td>
                        <td>
                            <button class="ui primary button save-button">Save</button>
                            <button class="ui red button delete-button">Delete</button>
                        </td>
                    </tr>
                `).join('');

                    // Add event listeners to save buttons
                    const saveButtons = modal.querySelectorAll('.save-button');
                    saveButtons.forEach(button => {
                        button.addEventListener('click', () => {
                            const tr = button.closest('tr');
                            const bonusId = tr.dataset.bonusId;
                            const name = tr.querySelector('td:nth-child(1)').textContent;
                            const description = tr.querySelector('td:nth-child(2)').textContent;

                            // Send a PUT request to update the individual bonus
                            fetch(`/api/casinos/${casinoId}/individualbonuses/${bonusId}`, {
                                    method: 'PUT',
                                    body: JSON.stringify({
                                        name: name,
                                        description: description
                                    }),
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                .then(response => response.json())
                                .then(result => {
                                    console.log('Individual bonus updated:', result);
                                    location.reload();
                                })
                                .catch(error => {
                                    console.error('Error updating individual bonus:', error);
                                });
                        });
                    });

                    // Add event listeners to delete buttons
                    const deleteButtons = modal.querySelectorAll('.delete-button');
                    deleteButtons.forEach(button => {
                        button.addEventListener('click', () => {
                            const tr = button.closest('tr');
                            const bonusId = tr.dataset.bonusId;

                            // Send a DELETE request to delete the individual bonus
                            fetch(`/api/casinos/${casinoId}/individualbonuses/${bonusId}`, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                .then(response => response.json())
                                .then(result => {
                                    console.log('Individual bonus deleted:', result);
                                    tr.remove();
                                })
                                .catch(error => {
                                    console.error('Error deleting individual bonus:', error);
                                });
                        });
                    });
                })
                .catch(error => {
                    console.error('Error fetching individual bonuses:', error);
                });
        }

        // Function to create a Fomantic UI modal with a form to add an individual bonus to a casino
        function createAddIndividualCasinoBonusModal(casinoId) {
            // Create the modal element
            var modal = $('<div>').addClass('ui modal');

            // Create the modal content
            var content = $('<div>').addClass('content');
            var form = $('<form>').addClass('ui form');
            var bonusInput = $('<div>').addClass('field');
            var bonusLabel = $('<label>').text('Bonus');
            var bonusInputField = $('<input>').attr('type', 'text').attr('placeholder', 'Enter bonus');
            bonusInput.append(bonusLabel, bonusInputField);
            form.append(bonusInput);
            content.append(form);

            // Create the modal actions
            var actions = $('<div>').addClass('actions');
            var cancelButton = $('<button>').addClass('ui button').text('Cancel');
            var addButton = $('<button>').addClass('ui primary button').text('Add');
            actions.append(cancelButton, addButton);

            // Append the content and actions to the modal
            modal.append(content, actions);

            // Initialize the modal
            modal.modal();

            // Event listener for cancel button
            cancelButton.on('click', function () {
                modal.modal('hide');
            });

            // Event listener for add button
            addButton.on('click', function () {
                var bonusName = bonusInputField.val();
                addIndividualCasinoBonus(casinoId, bonusName);

                modal.modal('hide');
            });

            // Show the modal
            modal.modal('show');
        }

        // Function to add an individual bonus to a casino
        function addIndividualCasinoBonus(casinoId, bonusName) {
            fetch(`/api/casinos/${casinoId}/individualbonuses`, {
                method: 'POST',
                body: JSON.stringify({
                    name: bonusName
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                showToast('success', 'Bonus added successfully');
                $('.ui.modal.edit').modal('show');
            })
            .catch(error => {
                console.log('Error:', error);
                showToast('error', 'Error adding bonus');
                $('.ui.modal.edit').modal('show');
                document.querySelector('.ui.modal').scrollTop = 0;
            });
        }

        fetchCasinos();
    </script>
</body>

</html>